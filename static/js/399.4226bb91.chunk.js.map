{"version":3,"file":"static/js/399.4226bb91.chunk.js","mappings":"qNACA,QAAmC,kCAAnC,EAAuF,iCAAvF,EAAqI,4BAArI,EAA6K,2BAA7K,EAAuN,8BAAvN,EAAkQ,4BAAlQ,EAA+S,gCAA/S,EAA4V,4BAA5V,EAAsY,6BAAtY,EAAmb,+B,aCOnb,MAuDA,EAvDgBA,KACZ,MAAM,QAACC,IAAWC,EAAAA,EAAAA,OACXC,EAASC,IAAcC,EAAAA,EAAAA,UAAS,IACjCC,GAAYC,EAAAA,EAAAA,SAAO,GAkBzB,OAhBAC,EAAAA,EAAAA,YAAU,KACWC,WACd,GAAGH,EAAUI,QAAQ,CACpBJ,EAAUI,SAAU,EACjB,IACI,MAAMC,QAAqBC,EAAAA,GAAoBX,EAAS,YACxDG,EAAWO,EAAaE,QAC5B,CACA,MAAMC,GAAOC,MAAM,QAAQ,CAC/B,GAEHC,EAAU,GACR,CAACf,KAKHgB,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CACKC,QAAQC,IAAIjB,IACbkB,EAAAA,EAAAA,KAAA,MAAIC,UAAWC,EAAqBL,SACZ,IAAnBf,EAAQqB,OAAerB,EAAQsB,KAAIC,IAChC,MAAMC,EAAiB,CACnBC,WAAW,sGAADC,QACsG,OAANH,QAAM,IAANA,OAAM,EAANA,EAAQI,eAAeC,SAAoD,GAA1CL,EAAOI,eAAeC,OAAOC,QAAQ,GAAO,mBAGrL,SAACC,EAAQ,OAAEF,EAAM,YAAEG,GAAeR,EAAOI,eAC/C,OACAb,EAAAA,EAAAA,MAAA,MAAIK,UAAWC,EAAcL,SAAA,EACzBD,EAAAA,EAAAA,MAAA,OAAKK,UAAWC,EAAoBL,SAAA,EAChCG,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAeL,SAC1BgB,GAAcb,EAAAA,EAAAA,KAAA,OAAKc,IAAG,kCAAAN,OAAoCK,GAAeE,IAAI,MAAQf,EAAAA,EAAAA,KAACgB,EAAAA,IAAM,CAACC,MAAM,QAAQC,KAAK,WAGrHtB,EAAAA,EAAAA,MAAA,OAAKK,UAAWC,EAAiBL,SAAA,EAC7BG,EAAAA,EAAAA,KAAA,KAAGC,UAAWC,EAAeL,SAAEQ,EAAOc,UACtCvB,EAAAA,EAAAA,MAAA,QAAMK,UAAWC,EAAmBL,SAAA,CAAC,IAAEe,SAE3CZ,EAAAA,EAAAA,KAAA,OAAKoB,MAAOd,EAAgBL,UAAWC,EAAgBL,UACnDG,EAAAA,EAAAA,KAAA,QAAAH,SAAa,OAANa,QAAM,IAANA,OAAM,EAANA,EAAQC,QAAQ,WAG/BX,EAAAA,EAAAA,KAAA,KAAGC,UAAWC,EAAeL,SAAA,GAAAW,OAAKH,EAAOgB,aAdVhB,EAAOiB,GAerC,KACL1B,EAAAA,EAAAA,MAAA,KAAGK,UAAWC,EAAkBL,SAAA,CAAC,mBAAeG,EAAAA,EAAAA,KAACuB,EAAAA,IAAa,CAACL,KAAK,QAAQD,MAAM,iBAExF,C,mECzDd,MAAMO,EAAW,+BACXC,EAAU,mCAEHC,EAAYtC,gBACKuC,EAAAA,EAAAA,GAAM,CAAEC,IAAI,GAADpB,OAAKgB,GAAQhB,OAAGqB,EAAI,aAAArB,OAAYiB,GAAWK,OAAQ,SACrEC,KAAKvC,QAIfwC,EAAkB5C,MAAMR,EAASiD,WACnBF,EAAAA,EAAAA,GAAM,CAAEC,IAAI,GAADpB,OAAKgB,EAAQ,WAAAhB,OAAU5B,GAAO4B,OAAGqB,EAAI,aAAArB,OAAYiB,GAAWK,OAAQ,SACtFC,KAGPE,EAAe7C,gBACDuC,EAAAA,EAAAA,GAAM,CAAEC,IAAI,GAADpB,OAAKgB,EAAQ,0BAAAhB,OAAyBiB,EAAO,WAAAjB,OAAU0B,GAASJ,OAAQ,SAC1FC,KAAKvC,O","sources":["webpack://goit-react-hw-05-movies/./src/components/DetailsComponents/Reviews/Reviews.module.css?e6eb","components/DetailsComponents/Reviews/Reviews.jsx","services/movies-api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"reviewsContainer\":\"Reviews_reviewsContainer__nibM8\",\"reviewTitleWrap\":\"Reviews_reviewTitleWrap__KT-Mm\",\"userAvatar\":\"Reviews_userAvatar__pzQA2\",\"reviewBox\":\"Reviews_reviewBox__vXpot\",\"userInfoWrap\":\"Reviews_userInfoWrap__G6y3t\",\"authorName\":\"Reviews_authorName__xbWvi\",\"authorUsername\":\"Reviews_authorUsername__GsSqC\",\"reviewText\":\"Reviews_reviewText__jMTOJ\",\"progressBar\":\"Reviews_progressBar__l3oWY\",\"noReviewsText\":\"Reviews_noReviewsText__uj3C3\"};","import { useParams } from \"react-router-dom\"\nimport { useState, useEffect, useRef } from \"react\"\nimport * as API from '../../../services/movies-api'\nimport { FaUser } from \"react-icons/fa\";\nimport { PiMaskSadFill } from \"react-icons/pi\";\nimport css from './Reviews.module.css'\n\n\nconst Reviews = () =>{\n    const {movieId} = useParams()\n    const [reviews, setReviews] = useState([])\n    const effectRun = useRef(true)\n\n    useEffect(() => {\n        const getMovie = async () =>{\n           if(effectRun.current){\n            effectRun.current = false\n               try{\n                   const fetchedMovie = await API.getMovieDetails(movieId, '/reviews')\n                   setReviews(fetchedMovie.results)\n               }\n               catch(error){alert('error')}\n           }\n        }\n        getMovie()\n       }, [movieId])\n\n    \n\n    return (\n        <div>\n            {console.log(reviews)}\n            <ul className={css.reviewsContainer}>\n                {reviews.length !== 0 ? reviews.map(review => {\n                    const ratingBarStyle = {\n                        background: \n                            `radial-gradient(closest-side, #1A1A1A 79%, transparent 80% 100%), conic-gradient(rgb(243, 208, 86) ${review?.author_details.rating && review.author_details.rating.toFixed(1) * 10}%, #2f2f2f 0)`\n                    }\n\n                    const {username, rating, avatar_path} = review.author_details\n                    return(\n                    <li className={css.reviewBox} key={review.id}>\n                        <div className={css.reviewTitleWrap}>\n                            <div className={css.userAvatar}>\n                                {avatar_path ? <img src={`https://image.tmdb.org/t/p/w185${avatar_path}`} alt=\"\" /> : <FaUser color=\"white\" size=\"2em\"/>}\n                                \n                            </div>\n                            <div className={css.userInfoWrap}>\n                                <p className={css.authorName}>{review.author}</p>\n                                <span className={css.authorUsername}>@{username}</span>\n                            </div>\n                            <div style={ratingBarStyle} className={css.progressBar}>\n                                <span>{rating?.toFixed(1)}</span>\n                            </div>\n                        </div>\n                        <p className={css.reviewText}>{`${review.content}`}</p>\n                    </li>)\n                }): <p className={css.noReviewsText}>No reviews yet <PiMaskSadFill size=\"1.2em\" color=\"white\"/></p>}\n            </ul>\n        </div>\n    )\n}   \n\nexport default Reviews","import axios from 'axios'\n\nconst BASE_URL = 'https://api.themoviedb.org/3'\nconst API_KEY = 'f331f91cb9692f1df13f3cba648b2743'\n\nexport const getMovies = async (type) =>{\n    const trendMovies = await axios({ url: `${BASE_URL}${type}?api_key=${API_KEY}`, method: \"GET\" })\n    return trendMovies.data.results;\n\n}\n\nexport const getMovieDetails = async(movieId, type) => {\n    const response = await axios({ url: `${BASE_URL}/movie/${movieId}${type}?api_key=${API_KEY}`, method: \"GET\" })\n    return response.data\n}\n\nexport const searchMovies = async(query) => {\n    const response = await axios({ url: `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}`, method: \"GET\" })\n    return response.data.results\n}\n\n"],"names":["Reviews","movieId","useParams","reviews","setReviews","useState","effectRun","useRef","useEffect","async","current","fetchedMovie","API","results","error","alert","getMovie","_jsxs","children","console","log","_jsx","className","css","length","map","review","ratingBarStyle","background","concat","author_details","rating","toFixed","username","avatar_path","src","alt","FaUser","color","size","author","style","content","id","PiMaskSadFill","BASE_URL","API_KEY","getMovies","axios","url","type","method","data","getMovieDetails","searchMovies","query"],"sourceRoot":""}