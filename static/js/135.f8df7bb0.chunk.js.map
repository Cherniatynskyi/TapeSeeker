{"version":3,"file":"static/js/135.f8df7bb0.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/pages/MovieDetails/MovieDetails.module.css?0c24","pages/MovieDetails/MovieDetails.jsx","services/movies-api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"detailsContainer\":\"MovieDetails_detailsContainer__Y0Fjr\",\"detailsMenuButton\":\"MovieDetails_detailsMenuButton__g9Nio\",\"backButton\":\"MovieDetails_backButton__pPF5M\"};","import { Link, useParams, Outlet, useLocation } from 'react-router-dom'\nimport {useState, useEffect, useRef, Suspense} from 'react'\nimport * as API from '../../services/movies-api'\nimport Notiflix from 'notiflix';\n\nimport css from './MovieDetails.module.css'\n\nconst MovieDetails = () =>{\n\n    const [movie, setMovie] = useState({})\n    const {movieId} = useParams()\n    const effectRun = useRef(true)\n    const {title, vote_average, poster_path, genres, overview} = movie\n    const location = useLocation()\n    const backLinkLocation = useRef(location.state?.from ?? '/')\n\n    useEffect(() => {\n     const getMovie = async () =>{\n        if(effectRun.current){\n            effectRun.current = false\n            try{\n                const fetchedMovie = await API.getMovieDetails(movieId)\n                setMovie(fetchedMovie)\n            }\n            catch(error){Notiflix.Notify.failure('Error')}\n        }\n     }\n     getMovie()\n    }, [movieId])\n\n\n    return (\n        <>\n            <Link className={css.backButton} to={backLinkLocation.current}>Back to movies</Link>\n            <div className={css.detailsContainer}>\n                <img src={poster_path ? `https://image.tmdb.org/t/p/w300${poster_path}`: 'https://eticketsolutions.com/demo/themes/e-ticket/img/movie.jpg'} alt={title} />\n                <div>\n                    {console.log(movie)}\n                    <p>{title}</p>\n                    <p>Score: {vote_average !== 0 ? Math.ceil((vote_average)*10)/10 : 'No reviews yet'}</p>\n                    <p>Overview</p>\n                    <p>{overview}</p>\n                    <p>Genres</p>\n                    <ul>\n                        {Object.keys(movie).length !== 0 && genres.map(genre => <li key={genre.id}>{genre.name}</li>)}\n                    </ul>\n                </div>\n            </div>\n            <ul>\n                <li className={css.detailsMenuButton}><Link to='cast'>Cast</Link></li>\n                <li className={css.detailsMenuButton}><Link to='reviews'>Reviews</Link></li>\n            </ul>\n            <Suspense fallback={<div>Loading....</div>}>\n                <Outlet/>\n            </Suspense>\n        </>\n        \n    )\n}\n\nexport default MovieDetails","import axios from 'axios'\n\nconst BASE_URL = 'https://api.themoviedb.org/3'\nconst API_KEY = 'f331f91cb9692f1df13f3cba648b2743'\n\nexport const getMovies = async (type) =>{\n    const trendMovies = await axios({ url: `${BASE_URL}${type}?api_key=${API_KEY}`, method: \"GET\" })\n    return trendMovies.data.results;\n\n}\n\nexport const getMovieDetails = async(movieId, type) => {\n    const response = await axios({ url: `${BASE_URL}/movie/${movieId}${type}?api_key=${API_KEY}`, method: \"GET\" })\n    return response.data\n}\n\nexport const searchMovies = async(query) => {\n    const response = await axios({ url: `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}`, method: \"GET\" })\n    return response.data.results\n}\n\n"],"names":["MovieDetails","_location$state$from","_location$state","movie","setMovie","useState","movieId","useParams","effectRun","useRef","title","vote_average","poster_path","genres","overview","location","useLocation","backLinkLocation","state","from","useEffect","async","current","fetchedMovie","API","error","Notiflix","failure","getMovie","_jsxs","_Fragment","children","_jsx","Link","className","css","to","src","concat","alt","console","log","Math","ceil","Object","keys","length","map","genre","name","id","Suspense","fallback","Outlet","BASE_URL","API_KEY","getMovies","axios","url","type","method","data","results","getMovieDetails","searchMovies","query"],"sourceRoot":""}